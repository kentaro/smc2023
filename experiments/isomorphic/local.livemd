<!-- livebook:{"app_settings":{"slug":"antipop"},"persist_outputs":true} -->

# Image Prediction using a Standalone Wasm Binary on Local Machine

```elixir
Mix.install([
  {:nx, "~> 0.5.1"},
  {:nx_image, "~> 0.1.0"},
  {:kino, "~> 0.8.1"},
  {:req, "~> 0.3.5"},
  {:benchee, "~> 1.1.0"},
  {:wasmtube, github: "kentaro/wasmtube", branch: :main}
])
```

<!-- livebook:{"output":true} -->

```
* Getting wasmtube (https://github.com/kentaro/wasmtube.git - origin/main)
remote: Enumerating objects: 1020, done.        
remote: Counting objects: 100% (243/243), done.        
remote: Compressing objects: 100% (147/147), done.        
remote: Total 1020 (delta 108), reused 193 (delta 67), pack-reused 777        
Resolving Hex dependencies...
Resolution completed in 0.369s
New:
  benchee 1.1.0
  castore 0.1.22
  complex 0.5.0
  deep_merge 1.0.0
  file_system 0.2.10
  finch 0.15.0
  hpax 0.1.2
  jason 1.4.0
  kino 0.8.1
  mime 2.0.3
  mint 1.5.1
  nimble_options 1.0.1
  nimble_pool 0.2.6
  nx 0.5.2
  nx_image 0.1.1
  req 0.3.6
  rustler_precompiled 0.5.5
  sleeplocks 1.1.2
  statistex 1.0.0
  table 0.1.2
  telemetry 1.2.1
  wasmex 0.8.2
* Getting nx (Hex package)
* Getting nx_image (Hex package)
* Getting kino (Hex package)
* Getting req (Hex package)
* Getting benchee (Hex package)
* Getting wasmex (Hex package)
* Getting jason (Hex package)
* Getting file_system (Hex package)
* Getting sleeplocks (Hex package)
* Getting rustler_precompiled (Hex package)
* Getting castore (Hex package)
* Getting deep_merge (Hex package)
* Getting statistex (Hex package)
* Getting finch (Hex package)
* Getting mime (Hex package)
* Getting mint (Hex package)
* Getting nimble_options (Hex package)
* Getting nimble_pool (Hex package)
* Getting telemetry (Hex package)
* Getting hpax (Hex package)
* Getting table (Hex package)
* Getting complex (Hex package)

22:31:43.261 [info] Compiling file system watcher for Mac...

22:31:44.081 [info] Done.
==> file_system
Compiling 7 files (.ex)
Generated file_system app
==> deep_merge
Compiling 2 files (.ex)
Generated deep_merge app
==> table
Compiling 5 files (.ex)
Generated table app
==> mime
Compiling 1 file (.ex)
Generated mime app
==> nimble_options
Compiling 3 files (.ex)
Generated nimble_options app
===> Analyzing applications...
===> Compiling telemetry
==> jason
Compiling 10 files (.ex)
Generated jason app
==> statistex
Compiling 3 files (.ex)
Generated statistex app
==> hpax
Compiling 4 files (.ex)
Generated hpax app
===> Analyzing applications...
===> Compiling sleeplocks
==> complex
Compiling 2 files (.ex)
Generated complex app
==> nx
Compiling 31 files (.ex)
Generated nx app
==> nx_image
Compiling 1 file (.ex)
Generated nx_image app
==> kino
Compiling 37 files (.ex)
Generated kino app
==> nimble_pool
Compiling 2 files (.ex)
Generated nimble_pool app
==> benchee
Compiling 44 files (.ex)
Generated benchee app
==> castore
Compiling 1 file (.ex)
Generated castore app
==> rustler_precompiled
Compiling 4 files (.ex)
Generated rustler_precompiled app
==> wasmex
Compiling 14 files (.ex)

22:31:53.244 [debug] Copying NIF from cache and extracting to /Users/kentaro/Library/Caches/mix/installs/elixir-1.14.3-erts-13.1.5/910aa37ed68d5a17f1379f97c568e2b5/_build/rpi4_dev/lib/wasmex/priv/native/libwasmex-v0.8.2-nif-2.16-aarch64-apple-darwin.so
Generated wasmex app
==> wasmtube
Compiling 4 files (.ex)
Generated wasmtube app
==> mint
Compiling 1 file (.erl)
Compiling 19 files (.ex)
Generated mint app
==> finch
Compiling 13 files (.ex)
Generated finch app
==> req
Compiling 5 files (.ex)
Generated req app
```

<!-- livebook:{"output":true} -->

```
:ok
```

## Experimental environment

* Machine: iMac
  * CPU: M1
  * Architecture: arm64
  * Memory: 16GB
* OS: macOS 13.2
* Runtime: Elixir v1.14.3

## Uploading an image to be predicted

```elixir
input = Kino.Input.image("Upload an image to be predicted")
```

This is a sample image that is used in this livebook.

![](https://upload.wikimedia.org/wikipedia/commons/4/40/Just_one_lion.jpg?20061206183417)
[File:Just one lion.jpg - Wikimedia Commons](https://commons.wikimedia.org/wiki/File:Just_one_lion.jpg)

## Preprocessing the image

```elixir
image = input |> Kino.Input.read()

nx_image =
  image.data
  |> Nx.from_binary(:u8)
  |> Nx.reshape({image.height, image.width, 3})
  |> NxImage.resize({224, 224}, method: :nearest)

kino_image =
  nx_image
  |> Kino.Image.new()
```

## Preparing label data

```elixir
label_data =
  Req.get!("https://raw.githubusercontent.com/kazum/tvm-wasm/master/synset.csv")
  |> Map.get(:body)
  |> String.trim()
  |> String.split("\r\n")
  |> Enum.reduce(%{}, fn line, acc ->
    [k, v] = line |> String.split(",", parts: 2)
    acc |> Map.put(String.to_integer(k), v)
  end)
```

<!-- livebook:{"output":true} -->

```
%{
  912 => "\"worm fence, snake fence, snake-rail fence, Virginia fence\"",
  326 => "\"lycaenid, lycaenid butterfly\"",
  33 => "\"loggerhead, loggerhead turtle, Caretta caretta\"",
  289 => "\"snow leopard, ounce, Panthera uncia\"",
  518 => "crash helmet",
  990 => "\"buckeye, horse chestnut, conker\"",
  456 => "bow",
  401 => "\"accordion, piano accordion, squeeze box\"",
  168 => "redbone",
  309 => "bee",
  117 => "\"chambered nautilus, pearly nautilus, nautilus\"",
  377 => "marmoset",
  579 => "\"grand piano, grand\"",
  277 => "\"red fox, Vulpes vulpes\"",
  399 => "abaya",
  413 => "\"assault rifle, assault gun\"",
  477 => "\"carpenter's kit, tool kit\"",
  246 => "Great Dane",
  704 => "parking meter",
  175 => "\"otterhound, otter hound\"",
  740 => "power drill",
  621 => "\"lawn mower, mower\"",
  869 => "trench coat",
  219 => "\"cocker spaniel, English cocker spaniel, cocker\"",
  923 => "plate",
  492 => "chest",
  360 => "otter",
  669 => "mosquito net",
  12 => "\"house finch, linnet, Carpodacus mexicanus\"",
  192 => "\"cairn, cairn terrier\"",
  974 => "geyser",
  311 => "\"grasshopper, hopper\"",
  864 => "\"tow truck, tow car, wrecker\"",
  327 => "\"starfish, sea star\"",
  916 => "\"web site, website, internet site, site\"",
  188 => "wire-haired fox terrier",
  270 => "\"white wolf, Arctic wolf, Canis lupus tundrarum\"",
  157 => "papillon",
  564 => "four-poster",
  559 => "folding chair",
  349 => "\"bighorn, bighorn sheep, cimarron, Rocky Mountain bighorn, Rocky Mountain sheep, Ovis canadensis\"",
  636 => "\"mailbag, postbag\"",
  132 => "\"American egret, great white heron, Egretta albus\"",
  770 => "running shoe",
  513 => "\"cornet, horn, trumpet, trump\"",
  405 => "\"airship, dirigible\"",
  73 => "\"barn spider, Araneus cavaticus\"",
  328 => "sea urchin",
  822 => "steel drum",
  427 => "\"barrel, cask\"",
  ...
}
```

## Prediction with Wasm binary (ResNet50)

```elixir
resnet50_wasm =
  Wasmtube.from_file("/Users/kentaro/src/github.com/kentaro/elixir-ml-wasm/wasm/resnet50.wasm")

resnet50_result =
  resnet50_wasm
  |> Wasmtube.call_function("predict", image: kino_image.content, width: 224, height: 224)
```

<!-- livebook:{"output":true} -->

```
%{
  "data" => [-1.2380532, -3.5076628, -1.745974, -2.5777662, -2.575174, 0.00320144, -1.8548435,
   1.9798119, 0.8790855, 2.6920712, -1.6338683, -2.262256, -1.7829849, -3.352644, -2.6420937,
   -1.8500642, -1.9090271, -0.8531388, -0.61099184, -3.1587193, -2.0874774, 2.5533094, 1.2311407,
   1.499493, 2.5900023, -1.0595945, -1.6094693, -1.8300521, -1.3385713, -2.9864905, -0.78965205,
   -2.2536402, -1.1391659, -2.6450782, -3.3188202, -3.0392742, -2.900531, -2.6652336, -0.8872474,
   -0.7320179, -2.1677976, -2.5951917, -1.1870259, 0.06935866, -1.2533929, -0.8644694, -3.7154303,
   0.23462734, -0.81006914, ...],
  "dtype" => "FP32",
  "shape" => [1, 1000],
  "strides" => nil
}
```

## Prediction with Wasm binary (MobileNet2)

```elixir
mobilenetv2_wasm =
  Wasmtube.from_file("/Users/kentaro/src/github.com/kentaro/elixir-ml-wasm/wasm/mobilenetv2.wasm")

mobilenetv2_result =
  mobilenetv2_wasm
  |> Wasmtube.call_function("predict", image: kino_image.content, width: 224, height: 224)
```

<!-- livebook:{"output":true} -->

```
%{
  "data" => [-2.9272294, -6.9886975, -3.4781256, -6.5197406, -5.079295, -2.939178, -3.6940205,
   1.2186813, 6.1876426, 2.8756125, -1.5650505, 0.40949318, 0.7039441, -2.9523182, -1.2515951,
   -3.3379555, -3.3519793, -1.4937574, -0.956601, -2.303063, -4.6055946, 0.48778173, 0.21371013,
   1.5368593, -0.48593968, -5.9181027, -6.4475255, -5.8687377, -6.2086544, -9.242665, -2.5257566,
   -4.0419445, -4.70027, -5.198278, -6.680466, -4.3889465, -3.2650526, -1.9704617, -2.3872275,
   -2.0531871, -2.6466992, -4.6954436, -4.2617893, -1.6960688, -4.7365513, -5.465204, -4.686872,
   -2.6651733, -4.0335364, ...],
  "dtype" => "FP32",
  "shape" => [1, 1000],
  "strides" => nil
}
```

## Find an index whose value is highest

```elixir
find_max = fn result ->
  {max_index, max_value} =
    result
    |> Map.get("data")
    |> Enum.with_index()
    |> Enum.reduce({0, 0}, fn {v, i}, acc ->
      {_, max_value} = acc

      if v > max_value do
        {i, v}
      else
        acc
      end
    end)

  {max_index, max_value}
end

{resnet50_max_index, resnet50_max_value} = resnet50_result |> find_max.() |> IO.inspect()
{mobilenetv2_max_index, mobilenetv2_max_value} = mobilenetv2_result |> find_max.() |> IO.inspect()
```

<!-- livebook:{"output":true} -->

```
{291, 15.836072}
{291, 16.522993}
```

<!-- livebook:{"output":true} -->

```
{291, 16.522993}
```

## Prediction result

```elixir
label_data[resnet50_max_index] |> IO.inspect()
label_data[mobilenetv2_max_index] |> IO.inspect()
```

<!-- livebook:{"output":true} -->

```
"\"lion, king of beasts, Panthera leo\""
"\"lion, king of beasts, Panthera leo\""
```

<!-- livebook:{"output":true} -->

```
"\"lion, king of beasts, Panthera leo\""
```

## Benchmark

```elixir
resnet50_wasm_func = fn ->
  resnet50_wasm
  |> Wasmtube.call_function("predict", image: kino_image.content, width: 224, height: 224)
end

mobilenetv2_wasm_func = fn ->
  mobilenetv2_wasm
  |> Wasmtube.call_function("predict", image: kino_image.content, width: 224, height: 224)
end

Benchee.run(%{
  "Wasm (ResNet50)" => resnet50_wasm_func,
  "Wasm (MobileNetV2)" => mobilenetv2_wasm_func
})
```

<!-- livebook:{"output":true} -->

```
Operating System: macOS
CPU Information: Apple M1
Number of Available Cores: 8
Available memory: 16 GB
Elixir 1.14.3
Erlang 25.2.3

Benchmark suite executing with the following configuration:
warmup: 2 s
time: 5 s
memory time: 0 ns
reduction time: 0 ns
parallel: 1
inputs: none specified
Estimated total run time: 14 s

Benchmarking Wasm (MobileNetV2) ...
Benchmarking Wasm (ResNet50) ...

Name                         ips        average  deviation         median         99th %
Wasm (MobileNetV2)         17.66       56.62 ms     ±5.48%       55.57 ms       80.66 ms
Wasm (ResNet50)             3.45      290.22 ms     ±2.52%      287.67 ms      306.51 ms

Comparison: 
Wasm (MobileNetV2)         17.66
Wasm (ResNet50)             3.45 - 5.13x slower +233.60 ms
```

<!-- livebook:{"output":true} -->

```
%Benchee.Suite{
  system: %{
    available_memory: "16 GB",
    cpu_speed: "Apple M1",
    elixir: "1.14.3",
    erlang: "25.2.3",
    num_cores: 8,
    os: :macOS
  },
  configuration: %Benchee.Configuration{
    parallel: 1,
    time: 5000000000.0,
    warmup: 2000000000.0,
    memory_time: 0.0,
    reduction_time: 0.0,
    pre_check: false,
    formatters: [Benchee.Formatters.Console],
    percentiles: '2c',
    print: %{benchmarking: true, configuration: true, fast_warning: true},
    inputs: nil,
    save: false,
    load: false,
    unit_scaling: :best,
    assigns: %{},
    before_each: nil,
    after_each: nil,
    before_scenario: nil,
    after_scenario: nil,
    measure_function_call_overhead: false,
    title: nil,
    profile_after: false
  },
  scenarios: [
    %Benchee.Scenario{
      name: "Wasm (MobileNetV2)",
      job_name: "Wasm (MobileNetV2)",
      function: #Function<43.3316493/0 in :erl_eval.expr/6>,
      input_name: :__no_input,
      input: :__no_input,
      before_each: nil,
      after_each: nil,
      before_scenario: nil,
      after_scenario: nil,
      tag: nil,
      run_time_data: %Benchee.CollectionData{
        statistics: %Benchee.Statistics{
          average: 56618945.573033705,
          ips: 17.661932589508993,
          std_dev: 3100967.250298819,
          std_dev_ratio: 0.054769074537052806,
          std_dev_ips: 0.9673277024632201,
          median: 55569591.0,
          percentiles: %{50 => 55569591.0, 99 => 80664905.0},
          mode: nil,
          minimum: 55182008,
          maximum: 80664905,
          relative_more: nil,
          relative_less: nil,
          absolute_difference: nil,
          sample_size: 89
        },
        samples: [55435216, 55388424, 55371216, 55395800, 55462424, 55416382, 55425509, 55447049,
         55330799, 55506467, 55539466, 55344883, 55415049, 55337216, 55585342, 56892093, 56451300,
         55556424, 55637300, 55457341, 55341634, 55665799, 55490967, 55456632, 60821262, 56430842,
         55729007, 55356842, 55722632, 58450302, 57025468, 55419217, 55446382, ...]
      },
      memory_usage_data: %Benchee.CollectionData{
        statistics: %Benchee.Statistics{
          average: nil,
          ips: nil,
          std_dev: nil,
          std_dev_ratio: nil,
          std_dev_ips: nil,
          median: nil,
          percentiles: nil,
          mode: nil,
          minimum: nil,
          maximum: nil,
          relative_more: nil,
          relative_less: nil,
          absolute_difference: nil,
          sample_size: 0
        },
        samples: []
      },
      reductions_data: %Benchee.CollectionData{
        statistics: %Benchee.Statistics{
          average: nil,
          ips: nil,
          std_dev: nil,
          std_dev_ratio: nil,
          std_dev_ips: nil,
          median: nil,
          percentiles: nil,
          mode: nil,
          minimum: nil,
          maximum: nil,
          relative_more: nil,
          relative_less: nil,
          absolute_difference: nil,
          sample_size: 0
        },
        samples: []
      }
    },
    %Benchee.Scenario{
      name: "Wasm (ResNet50)",
      job_name: "Wasm (ResNet50)",
      function: #Function<43.3316493/0 in :erl_eval.expr/6>,
      input_name: :__no_input,
      input: :__no_input,
      before_each: nil,
      after_each: nil,
      before_scenario: nil,
      after_scenario: nil,
      tag: nil,
      run_time_data: %Benchee.CollectionData{
        statistics: %Benchee.Statistics{
          average: 290220957.8888889,
          ips: 3.4456505390725436,
          std_dev: 7324084.65810937,
          std_dev_ratio: 0.025236236250427497,
          std_dev_ips: 0.08695525104044757,
          median: 287667861.0,
          percentiles: %{50 => 287667861.0, 99 => 306512441.0},
          mode: nil,
          minimum: 282842710,
          maximum: 306512441,
          relative_more: 5.125862994296284,
          relative_less: 0.1950891003354426,
          absolute_difference: 233602012.3158552,
          sample_size: 18
        },
        samples: [294957804, 292294594, 306182398, 294306220, 291838676, 306512441, 283057544,
         284358045, 296631098, 283271795, 282842710, 287087173, 283070461, 288248549, 286132464,
         286485464, 290964676, 285735130]
      },
      memory_usage_data: %Benchee.CollectionData{
        statistics: %Benchee.Statistics{
          average: nil,
          ips: nil,
          std_dev: nil,
          std_dev_ratio: nil,
          std_dev_ips: nil,
          median: nil,
          percentiles: nil,
          mode: nil,
          minimum: nil,
          maximum: nil,
          relative_more: nil,
          relative_less: nil,
          absolute_difference: nil,
          sample_size: 0
        },
        samples: []
      },
      reductions_data: %Benchee.CollectionData{
        statistics: %Benchee.Statistics{
          average: nil,
          ips: nil,
          std_dev: nil,
          std_dev_ratio: nil,
          std_dev_ips: nil,
          median: nil,
          percentiles: nil,
          mode: nil,
          minimum: nil,
          maximum: nil,
          relative_more: nil,
          relative_less: nil,
          absolute_difference: nil,
          sample_size: 0
        },
        samples: []
      }
    }
  ]
}
```
