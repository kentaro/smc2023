<!-- livebook:{"persist_outputs":true} -->

# Dynamic IoT Apps with Wasm Binaries

## Experimental environment

* Machine: Raspberry Pi 4 Model B
  * CPU: Cortex-A72 1.5 GHz
  * Architecture: ARMv8-A
  * Memory: 4GB
* OS: Linux (Nerves)
* Runtime: Elixir v1.14.3

## Dataset

Assume we have an IoT device which:

1. Collects data from a sensor once per second.
2. Calculates statistics from the data once per minute.
3. Sends the stats to an upper layer (e.g. cloud layer).

The 2nd process is what we would like to look into here. We will implement the process both in Elixir and Wasm and compare the performance.

The data used in the 2nd process consists of 60 values of number as below:

```elixir
{tensor, key} =
  Nx.Random.key(42)
  |> Nx.Random.normal(100, 30.0, shape: {60})

values =
  tensor
  |> Nx.to_list()
  |> Enum.map(&round/1)
```

<!-- livebook:{"output":true} -->

```
[127, 71, 110, 75, 140, 150, 44, 112, 119, 88, 88, 58, 34, 69, 59, 133, 124, 111, 121, 102, 91, 118,
 62, 122, 79, 77, 73, 82, 116, 153, 115, 139, 97, 111, 117, 81, 18, 100, 60, 118, 150, 47, 80, 159,
 109, 92, 106, 108, 106, 126, ...]
```

## Wasm

```elixir
wasm = Wasmtube.from_file("/data/wasm/liquid.wasm")
wasm |> Wasmtube.call_function("calc_stats", data: %{values: values})
```

<!-- livebook:{"output":true} -->

```
%{"mean" => 101, "median" => 108}
```

## Elixir

```elixir
defmodule Processor do
  use GenServer

  def start_link(args \\ []) do
    GenServer.start_link(__MODULE__, args, name: __MODULE__)
  end

  def init(args) do
    {:ok, args}
  end

  def handle_call({:calc_stats, values}, _from, state) do
    mean = calc_mean(values)
    median = calc_median(values)

    {:reply, %{mean: mean, median: median}, state}
  end

  def calc_mean(values) do
    if length(values) == 0 do
      0
    else
      (Enum.sum(values) / length(values)) |> round()
    end
  end

  def calc_median(values) do
    if length(values) == 0 do
      0
    else
      values = values |> Enum.sort()
      index = (length(values) / 2) |> round()
      values |> Enum.at(index)
    end
  end

  def calc_stats(pid, values) do
    GenServer.call(pid, {:calc_stats, values})
  end
end

{:ok, pid} = Processor.start_link()
pid |> Processor.calc_stats(values)
```

<!-- livebook:{"output":true} -->

```
%{mean: 101, median: 108}
```

## Benchmark

```elixir
wasm_func = fn ->
  wasm |> Wasmtube.call_function("calc_stats", data: %{values: values})
end

elixir_func = fn ->
  pid |> Processor.calc_stats(values)
end

Benchee.run(%{
  "Wasm" => wasm_func,
  "Elixir" => elixir_func
})
```

<!-- livebook:{"output":true} -->

```
Error trying to determine erlang version enoent
Operating System: Linux
CPU Information: Unrecognized processor
Number of Available Cores: 4
Available memory: 3.60 GB
Elixir 1.14.3
Erlang ok

Benchmark suite executing with the following configuration:
warmup: 2 s
time: 5 s
memory time: 0 ns
reduction time: 0 ns
parallel: 1
inputs: none specified
Estimated total run time: 14 s

Benchmarking Elixir ...
Benchmarking Wasm ...

Name             ips        average  deviation         median         99th %
Elixir       32.61 K       30.67 μs    ±68.32%       30.85 μs       43.19 μs
Wasm          4.02 K      248.99 μs    ±17.01%      235.59 μs      418.97 μs

Comparison: 
Elixir       32.61 K
Wasm          4.02 K - 8.12x slower +218.32 μs
```

<!-- livebook:{"output":true} -->

```
%Benchee.Suite{
  system: %{
    available_memory: "3.60 GB",
    cpu_speed: "Unrecognized processor",
    elixir: "1.14.3",
    erlang: :ok,
    num_cores: 4,
    os: :Linux
  },
  configuration: %Benchee.Configuration{
    parallel: 1,
    time: 5000000000.0,
    warmup: 2000000000.0,
    memory_time: 0.0,
    reduction_time: 0.0,
    pre_check: false,
    formatters: [Benchee.Formatters.Console],
    percentiles: '2c',
    print: %{benchmarking: true, configuration: true, fast_warning: true},
    inputs: nil,
    save: false,
    load: false,
    unit_scaling: :best,
    assigns: %{},
    before_each: nil,
    after_each: nil,
    before_scenario: nil,
    after_scenario: nil,
    measure_function_call_overhead: false,
    title: nil,
    profile_after: false
  },
  scenarios: [
    %Benchee.Scenario{
      name: "Elixir",
      job_name: "Elixir",
      function: #Function<43.3316493/0 in :erl_eval.expr/6>,
      input_name: :__no_input,
      input: :__no_input,
      before_each: nil,
      after_each: nil,
      before_scenario: nil,
      after_scenario: nil,
      tag: nil,
      run_time_data: %Benchee.CollectionData{
        statistics: %Benchee.Statistics{
          average: 30669.208405540106,
          ips: 32605.993176509874,
          std_dev: 20954.131188626,
          std_dev_ratio: 0.6832302585560321,
          std_dev_ips: 22277.40114846306,
          median: 30851.0,
          percentiles: %{50 => 30851.0, 99 => 43185.0},
          mode: 30907,
          minimum: 25481,
          maximum: 4827839,
          relative_more: nil,
          relative_less: nil,
          absolute_difference: nil,
          sample_size: 148878
        },
        samples: [123535, 34611, 51555, 31518, 56277, 37907, 31981, 43462, 36610, 32129, 37314,
         31370, 36573, 30703, 30704, 30666, 30573, 36129, 30963, 30832, 30796, 30684, 36037, 30611,
         30758, 30518, 30851, 35870, 30722, 30407, 30814, 30500, 35944, ...]
      },
      memory_usage_data: %Benchee.CollectionData{
        statistics: %Benchee.Statistics{
          average: nil,
          ips: nil,
          std_dev: nil,
          std_dev_ratio: nil,
          std_dev_ips: nil,
          median: nil,
          percentiles: nil,
          mode: nil,
          minimum: nil,
          maximum: nil,
          relative_more: nil,
          relative_less: nil,
          absolute_difference: nil,
          sample_size: 0
        },
        samples: []
      },
      reductions_data: %Benchee.CollectionData{
        statistics: %Benchee.Statistics{
          average: nil,
          ips: nil,
          std_dev: nil,
          std_dev_ratio: nil,
          std_dev_ips: nil,
          median: nil,
          percentiles: nil,
          mode: nil,
          minimum: nil,
          maximum: nil,
          relative_more: nil,
          relative_less: nil,
          absolute_difference: nil,
          sample_size: 0
        },
        samples: []
      }
    },
    %Benchee.Scenario{
      name: "Wasm",
      job_name: "Wasm",
      function: #Function<43.3316493/0 in :erl_eval.expr/6>,
      input_name: :__no_input,
      input: :__no_input,
      before_each: nil,
      after_each: nil,
      before_scenario: nil,
      after_scenario: nil,
      tag: nil,
      run_time_data: %Benchee.CollectionData{
        statistics: %Benchee.Statistics{
          average: 248985.3907153729,
          ips: 4016.2999006762925,
          std_dev: 42356.201839268244,
          std_dev_ratio: 0.17011520924007803,
          std_dev_ips: 683.2336979744521,
          median: 235589.0,
          percentiles: %{50 => 235589.0, 99 => 418974.5399999999},
          mode: 223034,
          minimum: 209775,
          maximum: 1163095,
          relative_more: 8.118415950716093,
          relative_less: 0.12317673867299124,
          absolute_difference: 218316.18230983277,
          sample_size: 19710
        },
        samples: [458864, 295163, 390643, 871321, 454808, 337366, 258663, 247033, 239663, 228423,
         240126, 238663, 232256, 233515, 237700, 219479, 267552, 248608, 227034, 232553, 232923,
         236978, 280015, 243960, 228923, 234386, 234274, 223589, 251829, 236682, 229015, 225405,
         ...]
      },
      memory_usage_data: %Benchee.CollectionData{
        statistics: %Benchee.Statistics{
          average: nil,
          ips: nil,
          std_dev: nil,
          std_dev_ratio: nil,
          std_dev_ips: nil,
          median: nil,
          percentiles: nil,
          mode: nil,
          minimum: nil,
          maximum: nil,
          relative_more: nil,
          relative_less: nil,
          absolute_difference: nil,
          sample_size: 0
        },
        samples: []
      },
      reductions_data: %Benchee.CollectionData{
        statistics: %Benchee.Statistics{
          average: nil,
          ips: nil,
          std_dev: nil,
          std_dev_ratio: nil,
          std_dev_ips: nil,
          median: nil,
          percentiles: nil,
          mode: nil,
          minimum: nil,
          maximum: nil,
          relative_more: nil,
          relative_less: nil,
          absolute_difference: nil,
          sample_size: 0
        },
        samples: []
      }
    }
  ]
}
```

## Bottleneck in executing Wasm binaries

Here we'll conduct an another benchmark to inspect bottleneck of executing Wasm binaries.

* `calc_stats` function is the same as above.
* `noop` function just returns value without any statistical calculation.

```elixir
wasm_with_calc_func = fn ->
  wasm
  |> Wasmtube.call_function("calc_stats", data: %{values: values})
end

wasm_without_calc_func = fn ->
  wasm
  |> Wasmtube.call_function("noop", data: %{values: values})
end

Benchee.run(%{
  "Wasm with calculation" => wasm_with_calc_func,
  "Wasm without calculation" => wasm_without_calc_func
})
```

<!-- livebook:{"output":true} -->

```
Error trying to determine erlang version enoent
Operating System: Linux
CPU Information: Unrecognized processor
Number of Available Cores: 4
Available memory: 3.60 GB
Elixir 1.14.3
Erlang ok

Benchmark suite executing with the following configuration:
warmup: 2 s
time: 5 s
memory time: 0 ns
reduction time: 0 ns
parallel: 1
inputs: none specified
Estimated total run time: 14 s

Benchmarking Wasm with calculation ...
Benchmarking Wasm without calculation ...

Name                               ips        average  deviation         median         99th %
Wasm without calculation        4.12 K      242.53 μs    ±16.06%      229.93 μs      387.65 μs
Wasm with calculation           3.75 K      266.92 μs    ±17.52%      255.87 μs      402.57 μs

Comparison: 
Wasm without calculation        4.12 K
Wasm with calculation           3.75 K - 1.10x slower +24.39 μs
```

<!-- livebook:{"output":true} -->

```
%Benchee.Suite{
  system: %{
    available_memory: "3.60 GB",
    cpu_speed: "Unrecognized processor",
    elixir: "1.14.3",
    erlang: :ok,
    num_cores: 4,
    os: :Linux
  },
  configuration: %Benchee.Configuration{
    parallel: 1,
    time: 5000000000.0,
    warmup: 2000000000.0,
    memory_time: 0.0,
    reduction_time: 0.0,
    pre_check: false,
    formatters: [Benchee.Formatters.Console],
    percentiles: '2c',
    print: %{benchmarking: true, configuration: true, fast_warning: true},
    inputs: nil,
    save: false,
    load: false,
    unit_scaling: :best,
    assigns: %{},
    before_each: nil,
    after_each: nil,
    before_scenario: nil,
    after_scenario: nil,
    measure_function_call_overhead: false,
    title: nil,
    profile_after: false
  },
  scenarios: [
    %Benchee.Scenario{
      name: "Wasm without calculation",
      job_name: "Wasm without calculation",
      function: #Function<43.3316493/0 in :erl_eval.expr/6>,
      input_name: :__no_input,
      input: :__no_input,
      before_each: nil,
      after_each: nil,
      before_scenario: nil,
      after_scenario: nil,
      tag: nil,
      run_time_data: %Benchee.CollectionData{
        statistics: %Benchee.Statistics{
          average: 242526.46199466244,
          ips: 4123.261403211366,
          std_dev: 38950.82792448355,
          std_dev_ratio: 0.16060444540415053,
          std_dev_ips: 662.2141109191009,
          median: 229925.5,
          percentiles: %{50 => 229925.5, 99 => 387645.20000000024},
          mode: 212259,
          minimum: 202666,
          maximum: 1037592,
          relative_more: nil,
          relative_less: nil,
          absolute_difference: nil,
          sample_size: 20234
        },
        samples: [495222, 281500, 257796, 231889, 275426, 270537, 271518, 240222, 240852, 242481,
         232204, 249426, 298815, 276463, 238278, 235759, 243667, 224093, 242611, 284703, 298778,
         246259, 270425, 244814, 229944, 263870, 262056, 289740, 256296, 246073, 246148, 232000,
         265073, ...]
      },
      memory_usage_data: %Benchee.CollectionData{
        statistics: %Benchee.Statistics{
          average: nil,
          ips: nil,
          std_dev: nil,
          std_dev_ratio: nil,
          std_dev_ips: nil,
          median: nil,
          percentiles: nil,
          mode: nil,
          minimum: nil,
          maximum: nil,
          relative_more: nil,
          relative_less: nil,
          absolute_difference: nil,
          sample_size: 0
        },
        samples: []
      },
      reductions_data: %Benchee.CollectionData{
        statistics: %Benchee.Statistics{
          average: nil,
          ips: nil,
          std_dev: nil,
          std_dev_ratio: nil,
          std_dev_ips: nil,
          median: nil,
          percentiles: nil,
          mode: nil,
          minimum: nil,
          maximum: nil,
          relative_more: nil,
          relative_less: nil,
          absolute_difference: nil,
          sample_size: 0
        },
        samples: []
      }
    },
    %Benchee.Scenario{
      name: "Wasm with calculation",
      job_name: "Wasm with calculation",
      function: #Function<43.3316493/0 in :erl_eval.expr/6>,
      input_name: :__no_input,
      input: :__no_input,
      before_each: nil,
      after_each: nil,
      before_scenario: nil,
      after_scenario: nil,
      tag: nil,
      run_time_data: %Benchee.CollectionData{
        statistics: %Benchee.Statistics{
          average: 266920.25664727314,
          ips: 3746.4372789116155,
          std_dev: 46759.89300355243,
          std_dev_ratio: 0.17518300630642725,
          std_dev_ips: 656.3121454582076,
          median: 255867.0,
          percentiles: %{50 => 255867.0, 99 => 402571.99999999907},
          mode: 235571,
          minimum: 225682,
          maximum: 4314020,
          relative_more: 1.1005819919689734,
          relative_less: 0.9086101783393444,
          absolute_difference: 24393.794652610697,
          sample_size: 18391
        },
        samples: [465679, 345959, 311255, 260459, 277071, 289885, 297552, 322922, 300274, 262497,
         269792, 335755, 262553, 266700, 278700, 256848, 308478, 283052, 322255, 258127, 264312,
         250774, 270163, 275145, 263626, 257256, 272756, 248108, 272589, 308700, 308033, 273570,
         ...]
      },
      memory_usage_data: %Benchee.CollectionData{
        statistics: %Benchee.Statistics{
          average: nil,
          ips: nil,
          std_dev: nil,
          std_dev_ratio: nil,
          std_dev_ips: nil,
          median: nil,
          percentiles: nil,
          mode: nil,
          minimum: nil,
          maximum: nil,
          relative_more: nil,
          relative_less: nil,
          absolute_difference: nil,
          sample_size: 0
        },
        samples: []
      },
      reductions_data: %Benchee.CollectionData{
        statistics: %Benchee.Statistics{
          average: nil,
          ips: nil,
          std_dev: nil,
          std_dev_ratio: nil,
          std_dev_ips: nil,
          median: nil,
          percentiles: nil,
          mode: nil,
          minimum: nil,
          maximum: nil,
          relative_more: nil,
          relative_less: nil,
          absolute_difference: nil,
          sample_size: 0
        },
        samples: []
      }
    }
  ]
}
```

The `calc_stats` function was 24.39μs slower than the `noop` function in an average value comparison.

* A large portion of the overhead is due to data passing between Elixir and Wasm.
* The difference between the two functions accounts for only about 10% of the total calculation.
* Therefore, the more complex the calculation process becomes, the relatively smaller the difference becomes.
